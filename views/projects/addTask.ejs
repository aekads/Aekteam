<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Time Tracker</title>
    <style>
        /* Base styles */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }
        
        .main-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .page-title {
            font-size: 28px;
            margin-bottom: 25px;
            color: #2c3e50;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        /* Form styles */
        .time-entry-form {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }
        
        .time-entry-form h2 {
            margin-bottom: 20px;
            color: #3498db;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr 1fr auto;
            gap: 15px;
            align-items: end;
        }
        
        input, select, button {
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
        }
        
        input:focus, select:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
        }
        
        button {
            background-color: #3498db;
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.2s;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        button:hover {
            background-color: #2980b9;
        }
        
        #calculated_hours {
            background: #f8f9fa;
            padding: 12px;
            border-radius: 6px;
            text-align: center;
            font-weight: bold;
            color: #2c3e50;
        }
        
        /* Time entries styles */
        .time-entries {
            display: flex;
            flex-direction: column;
            gap: 25px;
        }
        
        .day-group {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        .day-group h2 {
            margin-bottom: 15px;
            color: #2c3e50;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .entry {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid #eee;
            transition: background-color 0.2s;
        }
        
        .entry:hover {
            background-color: #f9f9f9;
        }
        
        .entry:last-child {
            border-bottom: none;
        }
        
        .entry-left {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .editable {
            cursor: pointer;
            padding: 5px 10px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }
        
        .editable:hover {
            background-color: #e8f4fc;
        }
        
        .edit-input {
            padding: 5px 10px;
            border: 1px solid #3498db;
            border-radius: 4px;
            font-size: inherit;
        }
        
        .editable-select {
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .entry-right {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .editable-time {
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .duration {
            font-weight: bold;
            color: #3498db;
        }
        
        .total-hours {
            margin-top: 15px;
            text-align: right;
            font-weight: bold;
            color: #2c3e50;
            padding: 10px;
            background-color: #e8f4fc;
            border-radius: 6px;
        }
        
        /* Responsive design */
        @media (max-width: 900px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .entry {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .entry-right {
                width: 100%;
                justify-content: space-between;
            }
        }
    </style>
</head>
<body>
    <%- include('../partials/sidebar') %>
    <div class="main-content">
        <main>
            <h1 class="page-title">‚è≥ IT Team - Clockify Time Tracker</h1>

            <!-- ‚úÖ Time Entry Form -->
            <div class="time-entry-form">
                <h2>üïí Add Your Work Time</h2>
                <form action="/dashboard/employee/projects/addTask" method="POST" class="form-row">
                    <input type="text" name="work_description" placeholder="What are you working on?" required>

                    <select name="project" required>
                        <% projects.forEach(project=> { %>
                            <option value="<%= project.name %>">
                                <%= project.name %>
                            </option>
                        <% }) %>
                    </select>

                    <input type="date" name="date" id="date" value="<%= new Date().toISOString().split('T')[0] %>" required>
                    
                    <input type="time" name="start_time" id="start_time" required>
                    <input type="time" name="end_time" id="end_time" required>

                    <p id="calculated_hours">‚è± 0 hrs</p>

                    <button type="submit">‚ûï Add Entry</button>
                </form>
            </div>

            <!-- ‚úÖ Time Entries Sorted by Day -->
            <div class="time-entries">
                <% for (const day in timeEntries) { %>
                    <div class="day-group">
                        <% var totalHours=0; %>
                        <h2>üìÖ <%= new Date(day).toDateString() %></h2>
                        <ul>
                            <% timeEntries[day].forEach(function(entry) { %>
                                <% var hours=calculateHours(entry.start_time, entry.end_time); %>
                                <% totalHours +=parseFloat(hours); %>

                                <li class="entry" data-id="<%= entry.id ? entry.id : '' %>">
                                    <div class="entry-left">
                                        <strong class="editable" data-field="work_description">
                                            <%= entry.work_description %>
                                        </strong>
                                        -
                                        <select class="editable-select" data-field="project" data-id="<%= entry.id %>">
                                            <% projects.forEach(project=> { %>
                                                <option value="<%= project.name %>" 
                                                    <%= project.name===entry.project ? 'selected' : '' %>>
                                                    <%= project.name %>
                                                </option>
                                            <% }); %>
                                        </select>
                                    </div>
                                    <div class="entry-right">
                                        (‚è±
                                        <input type="time" class="editable-time" data-field="start_time" 
                                            value="<%= entry.start_time %>">
                                        to
                                        <input type="time" class="editable-time" data-field="end_time" 
                                            value="<%= entry.end_time %>">
                                        )
                                        <span class="duration">( <%= hours %> hrs )</span>
                                    </div>
                                </li>
                            <% }); %>
                        </ul>
                        <p class="total-hours">üïí Total Hours: <%= totalHours.toFixed(2) %> hrs</p>
                    </div>
                <% } %>
            </div>
        </main>
    </div>

    <!-- ‚úÖ JavaScript for Inline Editing and Auto-Save -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            console.log("üöÄ Script Loaded Successfully");

            // ‚úÖ Real-time hours calculation for the form
            const startTimeInput = document.getElementById("start_time");
            const endTimeInput = document.getElementById("end_time");
            const calculatedHours = document.getElementById("calculated_hours");

            function updateFormHours() {
                if (startTimeInput.value && endTimeInput.value) {
                    const hours = calculateHours(startTimeInput.value, endTimeInput.value);
                    calculatedHours.textContent = `‚è± ${hours} hrs`;
                }
            }

            startTimeInput.addEventListener("change", updateFormHours);
            endTimeInput.addEventListener("change", updateFormHours);

            // ‚úÖ Click-to-Edit for Work Description
            document.querySelectorAll(".editable").forEach(element => {
                element.addEventListener("click", function () {
                    let currentText = this.innerText;
                    let input = document.createElement("input");
                    input.type = "text";
                    input.value = currentText;
                    input.classList.add("edit-input");

                    this.replaceWith(input);
                    input.focus();

                    input.addEventListener("blur", function () {
                        let updatedText = input.value;
                        let parent = input.closest(".entry");
                        let id = parent ? parent.dataset.id : "";

                        if (!id || id.trim() === "") {
                            console.warn("‚ö†Ô∏è Skipping update: ID is missing.", parent);
                            alert("‚ö†Ô∏è Cannot update entry. ID is missing.");
                            input.replaceWith(element);
                            return;
                        }

                        updateTimeEntry(id, "work_description", updatedText);

                        let newText = document.createElement("strong");
                        newText.innerText = updatedText;
                        newText.classList.add("editable");
                        newText.dataset.field = "work_description";

                        input.replaceWith(newText);
                        newText.addEventListener("click", arguments.callee);
                    });
                });
            });

            // ‚úÖ Update Project Selection
            document.querySelectorAll(".editable-select").forEach(select => {
                select.addEventListener("change", function () {
                    let parent = select.closest(".entry");
                    let id = parent ? parent.dataset.id : "";
                    let value = select.value;

                    if (!id || id.trim() === "") {
                        console.warn("‚ö†Ô∏è Skipping update: ID is missing.", parent);
                        alert("‚ö†Ô∏è Cannot update entry. ID is missing.");
                        return;
                    }

                    updateTimeEntry(id, "project", value);
                });
            });

            // ‚úÖ Update Time Fields
            document.querySelectorAll(".editable-time").forEach(input => {
                input.addEventListener("change", function () {
                    let parent = input.closest(".entry");
                    let id = parent ? parent.dataset.id : "";
                    let field = input.dataset.field;
                    let value = input.value;

                    if (!id || id.trim() === "") {
                        console.warn("‚ö†Ô∏è Skipping update: ID is missing.", parent);
                        alert("‚ö†Ô∏è Cannot update entry. ID is missing.");
                        return;
                    }

                    updateTimeEntry(id, field, value);
                    updateTotalHours(parent);
                });
            });

            // ‚úÖ Update Total Hours Dynamically
            function updateTotalHours(entryElement) {
                let startTime = entryElement.querySelector("[data-field='start_time']").value;
                let endTime = entryElement.querySelector("[data-field='end_time']").value;
                let durationElement = entryElement.querySelector(".duration");

                if (startTime && endTime) {
                    let hoursWorked = calculateHours(startTime, endTime);
                    durationElement.innerText = `( ${hoursWorked} hrs )`;
                    
                    // Update day total
                    const dayGroup = entryElement.closest('.day-group');
                    if (dayGroup) {
                        recalculateDayTotal(dayGroup);
                    }
                }
            }

            // ‚úÖ Recalculate day total hours
            function recalculateDayTotal(dayGroup) {
                let total = 0;
                const entries = dayGroup.querySelectorAll('.entry');
                
                entries.forEach(entry => {
                    const startTime = entry.querySelector("[data-field='start_time']").value;
                    const endTime = entry.querySelector("[data-field='end_time']").value;
                    
                    if (startTime && endTime) {
                        total += parseFloat(calculateHours(startTime, endTime));
                    }
                });
                
                const totalElement = dayGroup.querySelector('.total-hours');
                if (totalElement) {
                    totalElement.textContent = `üïí Total Hours: ${total.toFixed(2)} hrs`;
                }
            }

            // ‚úÖ Backend Update Request
            function updateTimeEntry(id, field, value) {
                if (!id || id.trim() === "") {
                    console.error("üö® Error: Missing ID in update request!", { id, field, value });
                    alert("‚ö†Ô∏è Cannot update entry. ID is missing.");
                    return;
                }

                console.log("‚úÖ Sending update request:", { id, field, value });

                fetch("/dashboard/employee/projects/update-time-entry", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ id, field, value }),
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            console.log("‚úÖ Update successful for:", field);
                        } else {
                            console.error("‚ùå Update failed:", data.message);
                        }
                    })
                    .catch(error => console.error("‚ùå Error updating entry:", error));
            }

            // ‚úÖ Time Calculation Logic
            function calculateHours(start, end) {
                if (!start || !end) return "0.00";
                
                const startTime = new Date("1970-01-01T" + start + "Z");
                const endTime = new Date("1970-01-01T" + end + "Z");
                let diff = (endTime - startTime) / (1000 * 60 * 60);
                return diff < 0 ? (diff + 24).toFixed(2) : diff.toFixed(2);
            }
        });
    </script>
</body>
</html>
