
<%- include('../partials/sidebar') %>   

<main>
    <h1 class="page-title">‚è≥ IT Team - Clockify Time Tracker</h1>

    <!-- ‚úÖ Time Entry Form -->
    <div class="time-entry-form">
        <h2>üïí Add Your Work Time</h2>
        <form action="/dashboard/employee/projects/addTask" method="POST" class="form-row">
            <input type="text" name="work_description" placeholder="What are you working on?" required>

            <select name="project" required>
                <% projects.forEach(project => { %>
                    <option value="<%= project.name %>"><%= project.name %></option>
                <% }) %>
            </select>

            <input type="time" name="start_time" id="start_time" required>
            <input type="time" name="end_time" id="end_time" required>          

            <p id="calculated_hours">‚è± 0 hrs</p><!-- Dynamic Time Calculation -->

            <button type="submit">‚ûï Add Entry</button>                                         
        </form>                                                                    
    </div>      



  <!-- ‚úÖ Time Entries Sorted by Day -->
  <div class="time-entries">
    <% for (const day in timeEntries) { %>
        <div class="day-group">
            <% var totalHours = 0; %>
            <% timeEntries[day].forEach(function(entry) { %> 
                
                <% var hours = calculateHours(entry.start_time, entry.end_time); %>
                <% totalHours += parseFloat(hours); %>

             <h2>üìÖ <%= new Date(entry.date).toDateString() %></h2>

            <ul>
              
                   
                    <!-- ‚úÖ Fix: Ensure entry.id is set properly -->
                    <li class="entry" data-id="<%= entry.id ? entry.id : '' %>">
                        
                        <div class="entry-left">
                            <!-- Editable Work Description -->
                            <strong class="editable" data-field="work_description"><%= entry.work_description %></strong>
                            - 
                            <!-- Editable Project (Dropdown) -->
                            <select class="editable-select" data-field="project" data-id="<%= entry.id %>">
                                <% projects.forEach(project => { %>
                                    <option value="<%= project.name %>" <%= project.name === entry.project ? 'selected' : '' %>>
                                        <%= project.name %>
                                    </option>
                                <% }); %>
                            </select>
                        </div>
                        <div class="entry-right">
                            (‚è± 
                            <!-- Editable Start Time -->
                            <input type="time" class="editable-time" data-field="start_time" value="<%= entry.start_time %>"> 
                            to 
                            <!-- Editable End Time -->
                            <input type="time" class="editable-time" data-field="end_time" value="<%= entry.end_time %>"> 
                            )
                            <span class="duration">( <%= hours %> hrs )</span>
                        </div>
                    </li>
                <% }); %> 
            </ul>
            <p class="total-hours">üïí Total Hours: <%= totalHours.toFixed(2) %> hrs</p>
        </div>
    <% } %>
</div>

<!-- ‚úÖ JavaScript for Inline Editing and Auto-Save -->
<script>
document.addEventListener("DOMContentLoaded", function () {
    console.log("üöÄ Script Loaded Successfully");

    // ‚úÖ Click-to-Edit for Work Description
    document.querySelectorAll(".editable").forEach(element => {
        element.addEventListener("click", function () {
            let currentText = this.innerText;
            let input = document.createElement("input");
            input.type = "text";
            input.value = currentText;
            input.classList.add("edit-input");

            this.replaceWith(input);
            input.focus();

            input.addEventListener("blur", function () {
                let updatedText = input.value;
                let parent = input.closest(".entry");
                let id = parent ? parent.dataset.id : "";

                if (!id || id.trim() === "") {
                    console.warn("‚ö†Ô∏è Skipping update: ID is missing.", parent);
                    alert("‚ö†Ô∏è Cannot update entry. ID is missing.");
                    input.replaceWith(element);
                    return;
                }

                updateTimeEntry(id, "work_description", updatedText);

                let newText = document.createElement("strong");
                newText.innerText = updatedText;
                newText.classList.add("editable");
                newText.dataset.field = "work_description";

                input.replaceWith(newText);
                newText.addEventListener("click", arguments.callee);
            });
        });
    });
    // ‚úÖ Update Time Fields
    document.querySelectorAll(".editable-select").forEach(select => {
        select.addEventListener("change", function () {
            let parent = select.closest(".entry");
            let id = parent ? parent.dataset.id : "";
            let value = select.value;

            if (!id || id.trim() === "") {
                console.warn("‚ö†Ô∏è Skipping update: ID is missing.", parent);
                alert("‚ö†Ô∏è Cannot update entry. ID is missing.");
                return;
            }

            updateTimeEntry(id, "project", value);
        });
    });


    document.querySelectorAll(".editable-time").forEach(input => {
        input.addEventListener("change", function () {
            let parent = input.closest(".entry");
            let id = parent ? parent.dataset.id : "";
            let field = input.dataset.field;
            let value = input.value;

            if (!id || id.trim() === "") {
                console.warn("‚ö†Ô∏è Skipping update: ID is missing.", parent);
                alert("‚ö†Ô∏è Cannot update entry. ID is missing.");
                return;
            }

            updateTimeEntry(id, field, value);
            updateTotalHours(parent);
        });
    });


    // ‚úÖ Update Total Hours Dynamically
    // ‚úÖ Update Total Hours Dynamically
    function updateTotalHours(entryElement) {
        let startTime = entryElement.querySelector("[data-field='start_time']").value;
        let endTime = entryElement.querySelector("[data-field='end_time']").value;
        let durationElement = entryElement.querySelector(".duration");

        if (startTime && endTime) {
            let hoursWorked = calculateHours(startTime, endTime);
            durationElement.innerText = `( ${hoursWorked} hrs )`;
        }
    }


    // ‚úÖ Backend Update Request
     function updateTimeEntry(id, field, value) {
        if (!id || id.trim() === "") {
            console.error("üö® Error: Missing ID in update request!", { id, field, value });
            alert("‚ö†Ô∏è Cannot update entry. ID is missing.");
            return;
        }

        console.log("‚úÖ Sending update request:", { id, field, value });

        fetch("/dashboard/employee/projects/update-time-entry", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id, field, value }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log("‚úÖ Update successful for:", field);
            } else {
                console.error("‚ùå Update failed:", data.message);
            }
        })
        .catch(error => console.error("‚ùå Error updating entry:", error));
    }




    // ‚úÖ Time Calculation Logic
    function calculateHours(start, end) {
        const startTime = new Date("1970-01-01T" + start + "Z");
        const endTime = new Date("1970-01-01T" + end + "Z");
        let diff = (endTime - startTime) / (1000 * 60 * 60);
        return diff < 0 ? (diff + 24).toFixed(2) : diff.toFixed(2);
    }                                                                             
});
 
</script>                                                                                   
 

<style>
 /* üåü General Reset & Base Styles */
   /* General Styles */
   body {
    font-family: Arial, sans-serif;
    background-color: #f4f7fc;
    margin: 0;
    padding: 30px;
    display: flex;
}

/* üåü Main Container */
main {
    padding: 20px;
    max-width: 900px;
    margin: auto;
}

/* üåü Page Title */
.page-title {
    text-align: center;
    font-size: 28px;
    font-weight: 600;
    color: #2c3e50;
}

/* üåü Time Entry Form */
.time-entry-form {
    background: #ffffff;
    padding: 20px;
    margin: 20px 0;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.time-entry-form h2 {
    font-size: 20px;
    margin-bottom: 10px;
    color: #2c3e50;
}

.form-row {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    align-items: center;
}

.form-row input,
.form-row select {
    flex: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 14px;
    transition: 0.3s;
}

.form-row input:focus,
.form-row select:focus {
    border-color: #2980b9;
    outline: none;
}

/* üåü Add Entry Button */
.form-row button {
    background: #2980b9;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: 0.3s;
}

.form-row button:hover {
    background: #1f669a;
}

/* üåü Time Entries */
.time-entries {
    margin-top: 20px;
}

.day-group {
    background: white;
    padding: 15px;
    margin-bottom: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.day-group h2 {
    font-size: 18px;
    color: #2c3e50;
    border-bottom: 2px solid #ddd;
    padding-bottom: 5px;
    margin-bottom: 10px;
}

/* üåü Individual Time Entry */
.entry {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    background: #f9f9f9;
    border-radius: 6px;
    border-left: 4px solid #2980b9;
    margin: 5px 0;
    transition: 0.3s;
}

.entry:hover {
    background: #eef5fa;
}

/* üåü Entry Left */
.entry-left {
    font-size: 16px;
    font-weight: 500;
    color: #2c3e50;
}

/* üåü Entry Right */
.entry-right {
    font-size: 14px;
    color: #555;
    display: flex;
    align-items: center;
    gap: 5px;
}

/* üåü Editable Fields */
.editable {
    cursor: pointer;
    transition: 0.3s;
}

.editable:hover {
    color: #2980b9;
    text-decoration: underline;
}

.editable-time {
    border: none;
    background: transparent;
    font-size: 14px;
    cursor: pointer;
}

.editable-time:focus {
    outline: 2px solid #2980b9;
    border-radius: 4px;
}

/* üåü Total Hours */
.total-hours {
    font-size: 16px;
    font-weight: bold;
    color: #27ae60;
    text-align: right;
    margin-top: 10px;
}

/* üåü Responsive Design */
@media (max-width: 768px) {
    .form-row {
        flex-direction: column;
    }

    .form-row input,
    .form-row select,
    .form-row button {
        width: 100%;
    }

    .entry {
        flex-direction: column;
        align-items: flex-start;
    }

    .entry-right {
        margin-top: 5px;
    }
}

</style>
