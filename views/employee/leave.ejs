<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="https://res.cloudinary.com/dqfnwh89v/image/upload/v1724408615/qxvvfcf7ftgklhl2k03v.png"
        type="image/png">
    <title>Leave Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        :root {
            --primary-color: #4361ee;
            --primary-light: #eef2ff;
            --secondary-color: #3f37c9;
            --accent-color: #4cc9f0;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --text-color: #2b2d42;
            --text-light: #6c757d;
            --light-gray: #f8f9fa;
            --medium-gray: #e9ecef;
            --white: #ffffff;
            --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
            --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
            --border-radius: 12px;
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            color: var(--text-color);
            background-color: var(--light-gray);
            line-height: 1.6;
        }

        .container {
            /* margin-left: 270px; */
            /* padding: 20px; */
            transition: margin-left 0.3s ease;
        }

        .main-content {
            margin-left: 270px;
            /* height: 100vh; */
            padding: 20px;
            transition: margin-left 0.3s ease;
        }

        @media (max-width: 1000px) {
            .main-content {
                margin-left: 0;
            }
        }

        /* Header */
        .dashboard-header {
            margin-bottom: 2rem;
        }

        .dashboard-header h2 {
            font-size: 2rem;
            color: var(--text-color);
            margin-bottom: 1rem;
            position: relative;
            display: inline-block;
        }

        .dashboard-header h2::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 60px;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
            border-radius: 2px;
        }

        /* Leave Balance Cards */
        .leave-balance-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2.5rem;
        }

        .leave-balance-card {
            background: var(--white);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-md);
            text-align: center;
            transition: var(--transition);
            border-top: 4px solid var(--primary-color);
        }

        .leave-balance-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

        .leave-balance-card h3 {
            margin-bottom: 1rem;
            color: var(--text-light);
            font-weight: 500;
            font-size: 1.1rem;
        }

        .leave-balance-card p {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin: 0.5rem 0;
        }

        /* Navigation Tabs */
        .tab-nav {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 2rem;
            border-bottom: 1px solid var(--medium-gray);
            padding-bottom: 0.5rem;
        }

        .tab-btn {
            padding: 0.75rem 1.5rem;
            background: transparent;
            border: none;
            border-radius: 6px 6px 0 0;
            font-weight: 600;
            font-size: 15px;
            color: var(--text-light);
            cursor: pointer;
            transition: var(--transition);
            position: relative;
        }

        .tab-btn.active {
            color: var(--primary-color);
            background: var(--primary-light);
        }

        .tab-btn.active::after {
            content: '';
            position: absolute;
            bottom: -6px;
            left: 0;
            width: 100%;
            height: 3px;
            background: var(--primary-color);
            border-radius: 3px 3px 0 0;
        }

        .tab-btn:hover:not(.active) {
            background: var(--light-gray);
            color: var(--text-color);
        }

        /* Form Styling */
        .form-container {
            background: var(--white);
            padding: 2rem;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-sm);
            /* margin-bottom: 2rem; */
            border: 1px solid var(--medium-gray);
        }

        .form-container h3 {
            margin-bottom: 1.5rem;
            color: var(--primary-color);
            font-size: 1.4rem;
            display: flex;
            align-items: center;
        }

        .form-container h3 i {
            margin-right: 0.8rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-color);
        }

        .form-control {
            width: 100%;
            padding: 0.85rem 1rem;
            border: 1px solid var(--medium-gray);
            border-radius: 8px;
            font-size: 1rem;
            transition: var(--transition);
            font-family: 'Poppins', sans-serif;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        /* Multi-select Dropdown */
        .selectBox {
            position: relative;
            width: 100%;
        }

        .selectBox select {
            width: 100%;
            padding: 0.85rem 1rem;
            border: 1px solid var(--medium-gray);
            border-radius: 8px;
            background-color: var(--white);
            font-size: 1rem;
            cursor: pointer;
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 1rem center;
            background-size: 1rem;
        }

        .checkbox-list {
            display: none;
            position: absolute;
            width: 100%;
            max-height: 250px;
            overflow-y: auto;
            background: var(--white);
            border: 1px solid var(--medium-gray);
            border-radius: 0 0 8px 8px;
            box-shadow: var(--shadow-md);
            z-index: 10;
            margin-top: -8px;
            padding: 0.5rem;
        }

        .checkbox-list.show {
            display: block;
        }

        .checkbox-list label {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            cursor: pointer;
            transition: var(--transition);
            border-radius: 4px;
        }

        .checkbox-list label:hover {
            background: var(--light-gray);
        }

        .checkbox-list input {
            margin-right: 0.75rem;
            cursor: pointer;
        }

        /* Buttons */
        .btn {
            padding: 0.85rem 1.75rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: var(--primary-color);
            color: var(--white);
            box-shadow: var(--shadow-sm);
        }

        .btn-primary:hover {
            background: var(--secondary-color);
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .btn-outline {
            background: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
        }

        .btn-outline:hover {
            background: var(--primary-color);
            color: var(--white);
        }

        .btn-danger {
            background: var(--danger-color);
            color: var(--white);
        }

        .btn-danger:hover {
            background: #c82333;
            transform: translateY(-2px);
            box-shadow: var(--shadow-sm);
        }

        /* Table Styling */
        .table-container {
            background: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-sm);
            overflow: hidden;
            border: 1px solid var(--medium-gray);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.95rem;
        }

        th,
        td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid var(--medium-gray);
        }

        th {
            background: var(--primary-color);
            color: var(--white);
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
        }

        tr:last-child td {
            border-bottom: none;
        }

        tr:hover {
            background: var(--light-gray);
        }

        /* Status Badges */
        .badge {
            display: inline-block;
            padding: 0.35rem 0.75rem;
            border-radius: 50px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: capitalize;
        }

        .badge-pending {
            background: #fff3cd;
            color: #856404;
        }

        .badge-approved {
            background: #d4edda;
            color: #155724;
        }

        .badge-rejected {
            background: #f8d7da;
            color: #721c24;
        }

        .badge-cancelled {
            background: #e2e3e5;
            color: #383d41;
        }

        /* Responsive Adjustments */
        @media (max-width: 1200px) {
            .container {
                margin-left: 0;
                padding: 1.5rem;
            }
        }

        @media (max-width: 768px) {
            .leave-balance-cards {
                grid-template-columns: 1fr;
            }

            .tab-nav {
                overflow-x: auto;
                padding-bottom: 0;
                scrollbar-width: none;
            }

            .tab-nav::-webkit-scrollbar {
                display: none;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            table {
                display: block;
                overflow-x: auto;
            }

            .form-container {
                padding: 1.5rem;
            }
        }

        @media (max-width: 576px) {
            .container {
                padding: 1rem;
            }

            .dashboard-header h2 {
                font-size: 1.5rem;
            }

            .leave-balance-card {
                padding: 1.25rem;
            }

            .tab-btn {
                padding: 0.5rem 1rem;
                font-size: 0.9rem;
            }

            .btn {
                padding: 0.75rem 1.25rem;
                width: 100%;
            }

            th,
            td {
                padding: 0.75rem;
            }
        }

        /* Animation */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .section {
            animation: fadeIn 0.4s ease-out;
        }
    </style>
</head>

<body>
    <%- include('../partials/sidebar') %>

        <div class="main-content">

            <div class="container">
                <div class="dashboard-header">
                    <h2>Leave Management Dashboard</h2>
                </div>

                <!-- Leave Balance Cards -->
                <div class="leave-balance-cards">
                    <div class="leave-balance-card">
                        <h3><i class="fas fa-calendar-check"></i> Total Accrued Leave</h3>
                        <p>
                            <%= employeeData.leave_balance %>
                        </p>
                        <small>days available</small>
                    </div>
                    <div class="leave-balance-card">
                        <h3><i class="fas fa-calendar-minus"></i> Leave Taken</h3>
                        <p>
                            <%= employeeData.leave_taken %>
                        </p>
                        <small>days used</small>
                    </div>
                    <div class="leave-balance-card">
                        <h3><i class="fas fa-calendar-alt"></i> Remaining Leave</h3>
                        <p>
                            <%= employeeData.leave_balance %>
                        </p>
                        <small>days remaining</small>
                    </div>
                </div>

                <!-- Navigation Tabs -->
                <div class="tab-nav">
                    <button class="tab-btn active" onclick="showSection('applySection')">
                        <i class="fas fa-plus-circle"></i> Apply Leave
                    </button>
                    <button class="tab-btn" onclick="showSection('pendingSection')">
                        <i class="fas fa-clock"></i> Pending Requests
                    </button>
                    <button class="tab-btn" onclick="showSection('historySection')">
                        <i class="fas fa-history"></i> Leave History
                    </button>
                </div>

                <!-- Leave Application Form -->
                <div id="applySection" class="section form-container">
                    <h3><i class="fas fa-file-alt"></i> Leave Application Form</h3>
                    <form id="leaveForm">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="start_date"><i class="fas fa-calendar-day"></i> Start Date</label>
                                <input type="date" class="form-control" id="start_date" required>
                            </div>
                            <div class="form-group">
                                <label for="end_date"><i class="fas fa-calendar-day"></i> End Date</label>
                                <input type="date" class="form-control" id="end_date" required>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="leave_type"><i class="fas fa-tag"></i> Leave Type</label>
                                <select class="form-control" id="leave_type">
                                    <option value="Sick">Sick Leave</option>
                                    <option value="Casual">Casual Leave</option>
                                    <option value="Paid">Paid Leave</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="half_day"><i class="fas fa-clock"></i> Duration</label>
                                <select class="form-control" id="half_day">
                                    <option value="">Full Day</option>
                                    <option value="1st half">First Half</option>
                                    <option value="2nd half">Second Half</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="remark"><i class="fas fa-comment-alt"></i> Reason</label>
                            <input type="text" class="form-control" id="remark" placeholder="Brief reason for leave">
                        </div>

                        <div class="form-group" style="display: none;">
    <label><i class="fas fa-users"></i> CC to (Optional)</label>
    <div class="selectBox">
        <select id="ccSelect">
            <option>Select employees to notify</option>
        </select>
        <div id="checkboxes" class="checkbox-list"></div>
    </div>
</div>


                        <div class="form-group" style="margin-top: 2rem;">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-paper-plane"></i> Submit Application
                            </button>
                        </div>
                    </form>
                </div>

                <!-- Pending Leaves Section -->
                <div id="pendingSection" class="section" style="display: none;">
                    <div class="table-container">
                        <table>
                            <thead>
                                <tr>
                                    <th>Date Range</th>
                                    <th>Type</th>
                                    <th>Duration</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="pendingList"></tbody>
                        </table>
                    </div>
                </div>

                <!-- Leave History Section -->
                <div id="historySection" class="section" style="display: none;">
                    <div class="table-container">
                        <table>
                            <thead>
                                <tr>
                                    <th>Date Range</th>
                                    <th>Type</th>
                                    <th>Duration</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody id="leaveList"></tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>

        <script>
            document.addEventListener('DOMContentLoaded', async () => {
                // Initialize the CC dropdown
                await initCCDropdown();

                // Load initial data
                fetchLeaveHistory();

                // Set up form submission
                setupLeaveForm();
            });

            async function initCCDropdown() {
                const checkboxes = document.getElementById('checkboxes');

                try {
                    const response = await fetch('/dashboard/employee/cc', { credentials: 'include' });
                    const result = await response.json();

                    if (result.success) {
                        result.employees.forEach(employee => {
                            const label = document.createElement('label');
                            const input = document.createElement('input');
                            input.type = 'checkbox';
                            input.value = employee.emp_id;
                            input.onclick = updateSelectedOptions;
                            label.appendChild(input);
                            label.appendChild(document.createTextNode(employee.name));
                            checkboxes.appendChild(label);
                        });
                    } else {
                        console.error('Failed to fetch employees:', result.message);
                    }
                } catch (error) {
                    console.error('Error fetching employees:', error);
                }

                // Toggle dropdown when clicking the select box
                document.querySelector('.selectBox select').addEventListener('click', function (e) {
                    e.stopPropagation();
                    document.getElementById('checkboxes').classList.toggle('show');
                });

                // Close dropdown when clicking outside
                document.addEventListener('click', function () {
                    document.getElementById('checkboxes').classList.remove('show');
                });
            }

            function updateSelectedOptions() {
                const checkboxes = document.querySelectorAll('#checkboxes input[type=checkbox]');
                const selectedNames = [];

                checkboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        selectedNames.push(checkbox.nextSibling.nodeValue.trim());
                    }
                });

                const ccSelect = document.getElementById('ccSelect');
                ccSelect.options[0].text = selectedNames.length > 0
                    ? selectedNames.join(', ')
                    : 'Select employees to notify';
            }

            function setupLeaveForm() {
                document.getElementById("leaveForm").addEventListener("submit", async function (event) {
                    event.preventDefault();

                    const { isConfirmed } = await Swal.fire({
                        title: "Confirm Leave Application",
                        text: "Are you sure you want to submit this leave request?",
                        icon: "question",
                        showCancelButton: true,
                        confirmButtonColor: "#4361ee",
                        cancelButtonColor: "#6c757d",
                        confirmButtonText: "Yes, submit!",
                        cancelButtonText: "Review",
                        reverseButtons: true
                    });

                    if (!isConfirmed) return;

                    const selectedCC = [];
                    document.querySelectorAll('#checkboxes input[type="checkbox"]:checked').forEach(checkbox => {
                        selectedCC.push(checkbox.value);
                    });

                    const data = {
                        start_date: document.getElementById("start_date").value,
                        end_date: document.getElementById("end_date").value,
                        leave_type: document.getElementById("leave_type").value,
                        half_day: document.getElementById("half_day").value,
                        reason: document.getElementById("remark").value,
                        cc: selectedCC
                    };

                    try {
                        const response = await fetch("/dashboard/employee/leave/apply", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(data),
                            credentials: "include"
                        });

                        const result = await response.json();

                        if (response.ok) {
                            await Swal.fire({
                                title: "Success!",
                                text: result.message,
                                icon: "success",
                                confirmButtonColor: "#4361ee"
                            });
                            location.reload();
                        } else {
                            throw new Error(result.message || "Failed to submit leave request");
                        }
                    } catch (error) {
                        Swal.fire({
                            title: "Error!",
                            text: error.message,
                            icon: "error",
                            confirmButtonColor: "#dc3545"
                        });
                    }
                });
            }

            function showSection(sectionId) {
                // Hide all sections
                document.querySelectorAll('.section').forEach(section => {
                    section.style.display = 'none';
                });

                // Show selected section
                document.getElementById(sectionId).style.display = 'block';

                // Update active tab
                document.querySelectorAll('.tab-btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                event.currentTarget.classList.add('active');

                // Load data if needed
                if (sectionId === 'pendingSection') {
                    fetchPendingLeaves();
                } else if (sectionId === 'historySection') {
                    fetchLeaveHistory();
                }
            }

            async function fetchPendingLeaves() {
                try {
                    const response = await fetch('/dashboard/employee/leave/list?status=pending', {
                        credentials: 'include'
                    });
                    const result = await response.json();
                    const pendingList = document.getElementById('pendingList');

                    if (!response.ok) throw new Error(result.message || "Failed to fetch pending leaves");

                    pendingList.innerHTML = result.leaves.map(leave => {
                        const startDate = formatDate(leave.start_date);
                        const endDate = formatDate(leave.end_date);
                        const statusBadge = getStatusBadge(leave.status);

                        return `
                        <tr>
                            <td>${startDate} - ${endDate}</td>
                            <td>${leave.leave_type}</td>
                            <td>${leave.half_day || "Full Day"}</td>
                            <td>${statusBadge}</td>
                            <td>
                                <button class="btn btn-danger" onclick="cancelLeave(${leave.id})">
                                    <i class="fas fa-times"></i> Withdraw
                                </button>
                            </td>
                        </tr>
                    `;
                    }).join('') || '<tr><td colspan="5" style="text-align: center;">No pending leave requests</td></tr>';
                } catch (error) {
                    console.error("Error fetching pending leaves:", error);
                    pendingList.innerHTML = '<tr><td colspan="5" style="text-align: center; color: #dc3545;">Error loading data</td></tr>';
                }
            }

           async function fetchLeaveHistory() {
    try {
        // Remove the status filter to get ALL leaves
        const response = await fetch('/dashboard/employee/leave/list', {
            credentials: 'include'
        });
        const result = await response.json();
        const leaveList = document.getElementById('leaveList');

        if (!response.ok) throw new Error(result.message || "Failed to fetch leave history");

        leaveList.innerHTML = result.leaves.map(leave => {
            const startDate = formatDate(leave.start_date);
            const endDate = formatDate(leave.end_date);
            const statusBadge = getStatusBadge(leave.status);

            return `
                <tr>
                    <td>${startDate} - ${endDate}</td>
                    <td>${leave.leave_type}</td>
                    <td>${leave.half_day || "Full Day"}</td>
                    <td>${statusBadge}</td>
                </tr>
            `;
        }).join('') || '<tr><td colspan="4" style="text-align: center;">No leave history found</td></tr>';
    } catch (error) {
        console.error("Error fetching leave history:", error);
        leaveList.innerHTML = '<tr><td colspan="4" style="text-align: center; color: #dc3545;">Error loading data</td></tr>';
    }
}

            async function cancelLeave(leaveId) {
                if (!leaveId) {
                    await Swal.fire({
                        title: "Error!",
                        text: "Invalid leave ID",
                        icon: "error",
                        confirmButtonColor: "#dc3545"
                    });
                    return;
                }

                const { isConfirmed } = await Swal.fire({
                    title: "Confirm Withdrawal",
                    text: "Are you sure you want to withdraw this leave request?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#dc3545",
                    cancelButtonColor: "#6c757d",
                    confirmButtonText: "Yes, withdraw!",
                    cancelButtonText: "Cancel",
                    reverseButtons: true
                });

                if (!isConfirmed) return;

                try {
                    const response = await fetch('/dashboard/employee/leave/cancel', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ leaveId: leaveId }),
                        credentials: 'include'
                    });

                    const result = await response.json();

                    if (response.ok) {
                        await Swal.fire({
                            title: "Success!",
                            text: result.message,
                            icon: "success",
                            confirmButtonColor: "#4361ee"
                        });
                        fetchPendingLeaves();
                    } else {
                        throw new Error(result.message || "Failed to cancel leave");
                    }
                } catch (error) {
                    Swal.fire({
                        title: "Error!",
                        text: error.message,
                        icon: "error",
                        confirmButtonColor: "#dc3545"
                    });
                }
            }

            function formatDate(dateString) {
                if (!dateString) return '';
                const date = new Date(dateString);
                return date.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                });
            }

            function getStatusBadge(status) {
                switch (status.toLowerCase()) {
                    case 'pending':
                        return '<span class="badge badge-pending"><i class="fas fa-clock"></i> Pending</span>';
                    case 'approved':
                        return '<span class="badge badge-approved"><i class="fas fa-check"></i> Approved</span>';
                    case 'rejected':
                        return '<span class="badge badge-rejected"><i class="fas fa-times"></i> Rejected</span>';
                    case 'cancelled':
                        return '<span class="badge badge-cancelled"><i class="fas fa-ban"></i> Cancelled</span>';
                    default:
                        return `<span class="badge">${status}</span>`;
                }
            }
        </script>
</body>

</html>
