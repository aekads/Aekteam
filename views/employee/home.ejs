<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Employee Dashboard</title>
    <link rel="icon" href="https://res.cloudinary.com/dqfnwh89v/image/upload/v1724408615/qxvvfcf7ftgklhl2k03v.png"
        type="image/png">

    <!-- Bootstrap CSS + Icons -->
    <!-- Bootstrap CSS + Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

<!-- SweetAlert -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>




<style>
    body {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f7f7f7;
        color: #3b4452;
    }

    .dashboard-container {
        transition: margin-left 0.3s ease-in-out;
    }

    .main-content {
        margin-left: 270px;
        height: 100vh;
        padding: 20px;
        transition: margin-left 0.3s ease;
    }

    @media (max-width: 1000px) {
        .main-content {
            margin-left: 0;
        }
    }

    .card {
        border-radius: 12px;
        transition: all 0.3s ease-in-out;
    }

    .card:hover {
        transform: translateY(-4px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.07);
    }

    .fade-in {
        opacity: 0;
        animation: fadeIn 0.8s ease-in forwards;
    }

    @keyframes fadeIn {
        to {
            opacity: 1;
        }
    }

    @media screen and (max-width: 1024px) {
        .dashboard-container {
            margin-left: 0;
            padding: 20px;
        }
    }

    .leave-badge {
        background-color: #e3f2fd;
        color: #1976d2;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 0.8rem;
        margin-right: 5px;
        margin-bottom: 5px;
        display: inline-block;
    }

    .birthday-badge {
        background-color: #fff8e1;
        color: #ff8f00;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 0.8rem;
        margin-right: 5px;
        margin-bottom: 5px;
        display: inline-block;
    }

    .badge-icon {
        margin-right: 5px;
    }
/* Truncate long preview text */
.text-truncate-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Floating popup wrapper */
.custom-popup {
  display: none;               /* hidden initially */
  position: fixed;             /* fixed to viewport */
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  justify-content: center;     /* horizontal center */
  align-items: center;         /* vertical center */
  z-index: 9999;
  background: rgba(0,0,0,0.0); /* transparent overlay if needed */
}

/* Popup content */
.popup-content {
  pointer-events: auto;
  background: #fff;
  border-radius: 0.5rem;
  padding: 1.5rem;
  box-shadow: 0 10px 25px rgba(0,0,0,0.15);
  width: 90%;
  max-width: 800px;
  max-height: 90vh;
  overflow-y: auto;
}

/* Header */
.popup-header {
  border-bottom: 1px solid #ddd;
  padding-bottom: 0.5rem;
  margin-bottom: 0.75rem;
}

/* Body text */
.popup-body p {
  margin-bottom: 1rem;
}

/* Responsive for small screens */
@media (max-width: 576px) {
  .popup-content {
    width: 95%;
    padding: 1rem;
  }
}



</style>
</head>

<body>

    <!-- ✅ Sidebar Include -->
    <%- include('../partials/sidebar') %>
    <div class="main-content">
        <div class="dashboard-container fade-in">
            <h1 class="h3 fw-bold mb-2">Hello, <%= employee.name %>!</h1>
            <p class="text-muted mb-4">Employee ID: <%= employee.emp_id %></p>

            <!-- ✅ Motivational Quote Box -->
            <div class="alert alert-primary d-flex align-items-center shadow-sm" role="alert">
                <i class="bi bi-chat-quote me-2 fs-4"></i>
                <em><%= randomQuote %></em>
            </div>

            <!-- ✅ Grid Section -->
            <div class="row g-3 mb-4">
                <!-- Profile Card -->
                <div class="col-md-6 col-xl-3">
                    <div class="card shadow-sm h-100">
                        <div class="card-body">
                            <h5 class="card-title mb-1"><%= employee.name %></h5>
                            <p class="text-muted mb-0">Role: <%= employee.role %></p>
                        </div>
                    </div>
                </div>

                <!-- Punch In/Out Card -->
                <div class="col-md-6 col-xl-3">
                    <div class="card text-center shadow-sm h-100">
                        <div class="card-body">
                            <p id="dateDisplay" class="fw-semibold text-secondary"></p>
                            <p id="timeDisplay" class="text-muted mb-3 small"></p>
                            <button id="punchButton" class="btn btn-primary w-100">Loading...</button>
                        </div>
                    </div>
                </div>

                <!-- Contact Info Card -->
                <div class="col-md-6 col-xl-3">
                    <div class="card shadow-sm h-100">
                        <div class="card-body">
                            <h6 class="card-title"><i class="bi bi-telephone me-1"></i>Contact Info</h6>
                            <p class="mb-1">Email: <%= employee.email %></p>
                            <p class="mb-0">Phone: <%= employee.emp_number %></p>
                        </div>
                    </div>
                </div>

                <!-- Work Info Card -->
                <div class="col-md-6 col-xl-3">
                    <div class="card shadow-sm h-100">
                        <div class="card-body">
                            <h6 class="card-title"><i class="bi bi-person-badge me-1"></i>Work Details</h6>
                            <p class="mb-1">Designation: <%= employee.designation %></p>
                            <p class="mb-0">Joining Date: <%= employee.joining_date %></p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- ✅ Additional Information Section -->
            <div class="row g-3">
                <!-- Employees on Leave Today -->
                <div class="col-md-6" style="display: none;">
                    <div class="card shadow-sm h-100">
                        <div class="card-body">
                            <h5 class="card-title d-flex align-items-center">
                                <i class="bi bi-calendar-x me-2"></i>Employees on Leave Today
                            </h5>
                            <div id="onLeaveContainer">
                                <p class="text-muted">Loading employees on leave...</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Upcoming Birthdays -->
                <div class="col-md-6">
                    <div class="card shadow-sm h-100">
                        <div class="card-body">
                            <h5 class="card-title d-flex align-items-center">
                                <i class="bi bi-gift me-2"></i>Upcoming Birthdays
                            </h5>
                            <div id="birthdaysContainer">
                                <p class="text-muted">Loading upcoming birthdays...</p>
                            </div>
                        </div>
                    </div>
                </div>

        <!-- Upcoming Events -->
<!-- Upcoming Events -->
<!-- Upcoming Events Section -->
<div class="col-md-6">
  <div class="card shadow-sm h-100 border-0">
    <div class="card-body">
      <h5 class="card-title d-flex align-items-center mb-3">
        <i class="bi bi-calendar-event me-2 text-primary"></i>
        Upcoming Events
      </h5>

      <% if (!events || events.length === 0) { %>
        <p class="text-muted">No upcoming events.</p>
      <% } else { %>
        <div class="list-group list-group-flush">
          <% events.forEach((event, index) => { %>
            <div class="list-group-item border-0 border-bottom px-0 py-3">
              <div class="d-flex justify-content-between align-items-start">
                <div class="flex-grow-1 me-3">
                  <h6 class="fw-semibold text-primary mb-1">
                    <%= event.title %>
                  </h6>

                  <% if (event.description) { %>
                    <p class="text-muted small mb-2 text-truncate-3">
                      <%= event.description %>
                    </p>
                  <% } %>

                  <div class="d-flex align-items-center gap-2">
                    <span class="badge bg-light text-dark border">
                      <i class="bi bi-clock me-1"></i>
                      <%= new Date(event.date).toLocaleString("en-GB", {
                            timeZone: "Asia/Kolkata",
                            day: "2-digit",
                            month: "short",
                            year: "numeric",
                            hour: "2-digit",
                            minute: "2-digit"
                        }) %>
                    </span>

                    <% if (event.description && event.description.length > 120) { %>
                      <button class="btn btn-sm btn-outline-primary open-popup" data-index="<%= index %>">
                        Read More
                      </button>
                    <% } %>
                  </div>
                </div>
              </div>
            </div>

            <!-- Floating Popup -->
            <div class="custom-popup" id="popup<%= index %>">
              <div class="popup-content shadow-lg">
                <div class="popup-header d-flex justify-content-between align-items-center">
                  <h5 class="fw-bold"><%= event.title %></h5>
                  <button class="btn-close close-popup"></button>
                </div>
                <div class="popup-body">
                  <p class="mb-2 text-muted small">
                    <i class="bi bi-calendar3 me-1"></i>
                    <strong>Date:</strong>
                    <%= new Date(event.date).toLocaleString("en-GB", {
                          timeZone: "Asia/Kolkata",
                          day: "2-digit",
                          month: "short",
                          year: "numeric",
                          hour: "2-digit",
                          minute: "2-digit"
                      }) %>
                  </p>
                  <div style="white-space: pre-line; font-size: 15px; line-height: 1.7; color: #333;">
                    <%= event.description %>
                  </div>
                </div>
              </div>
            </div>

          <% }) %>
        </div>
      <% } %>
    </div>
  </div>
</div>
<script>
  // Open popup
  document.querySelectorAll('.open-popup').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const index = btn.dataset.index;
      const popup = document.getElementById('popup' + index);
      popup.style.display = 'flex';
    });
  });

  // Close popup only via close button
  document.querySelectorAll('.close-popup').forEach(btn => {
    btn.addEventListener('click', () => {
      btn.closest('.custom-popup').style.display = 'none';
    });
  });
</script>



            </div>
        </div>
    </div>        

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- ✅ Punch Logic & Clock -->
    <script>
        function formatISTTime(utcTime) {
            const date = new Date(utcTime);
            return date.toLocaleString("en-IN", { timeZone: "Asia/Kolkata" });
        }

        document.addEventListener("DOMContentLoaded", async () => {
            await checkPunchStatus();
            fetchEmployeesOnLeave();
            fetchUpcomingBirthdays();
        });

        async function checkPunchStatus() {
            try {
                const response = await fetch('/dashboard/employee/punch-status', {
                    method: 'GET',
                    credentials: 'include'
                });
                const data = await response.json();
                const punchButton = document.getElementById("punchButton");

                if (data.punchedIn) {
                    punchButton.textContent = "Punch Out";
                    punchButton.onclick = confirmPunchOut;
                } else {
                    punchButton.textContent = "Punch In";
                    punchButton.onclick = punchIn;
                }
            } catch (error) {
                console.error("Error checking punch status:", error);
            }
        }

       function getCurrentLocation() {
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject("Geolocation not supported by your browser.");
            return;
        }

        navigator.geolocation.getCurrentPosition(
            (position) => {
                resolve({
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude
                });
            },
            (error) => {
                switch (error.code) {
                    case error.PERMISSION_DENIED:
                        reject("Location permission denied");
                        break;
                    case error.POSITION_UNAVAILABLE:
                        reject("Location unavailable");
                        break;
                    case error.TIMEOUT:
                        reject("Location request timed out");
                        break;
                    default:
                        reject("Unable to retrieve location");
                }
            },
            {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 0
            }
        );
    });
}

async function punchIn() {
    try {
        // Check permission first
        const permissionStatus = await navigator.permissions.query({ name: 'geolocation' });

        if (permissionStatus.state === 'denied') {
            return Swal.fire({
                title: "Location Blocked!",
                html: `
                    You have <b>blocked location access</b> for this site.<br><br>
                    Please enable it manually:
                    <ul style="text-align:left;margin-top:10px">
                        <li>🔹 Click the <b>lock icon</b> in the address bar</li>
                        <li>🔹 Set “Location” to “Allow”</li>
                        <li>🔹 Then refresh this page</li>
                    </ul>
                `,
                icon: "warning",
                confirmButtonText: "Got it",
            });
        }

        Swal.fire({
            title: "Getting your location...",
            text: "Please wait a moment.",
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading()
        });

        const location = await getCurrentLocation();

        const response = await fetch('/dashboard/employee/punch-in', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({
                latitude: location.latitude,
                longitude: location.longitude
            })
        });

        const data = await response.json();
        Swal.close();

        if (response.ok) {
            // ✅ Instantly update button before reload
            const punchButton = document.getElementById("punchButton");
            punchButton.textContent = "Punch Out";
            punchButton.onclick = confirmPunchOut;

            // ✅ Show success popup and reload smoothly after 1 second
            Swal.fire({
                title: "✅ Success!",
                text: "You punched in successfully.",
                icon: "success",
                showConfirmButton: false,
                timer: 1200
            });

            setTimeout(() => {
                location.reload(); // Auto refresh to fetch new state from backend
            }, 1300);
        } else {
            Swal.fire("Error!", data.message, "error");
        }

    } catch (error) {
        Swal.close();
        if (error.toString().includes("denied")) {
            Swal.fire({
                title: "Location Required!",
                text: "Please allow location access to Punch In.",
                icon: "warning",
                confirmButtonText: "Okay, I’ll Allow"
            });
        } else {
            Swal.fire("Location Error", error.toString(), "error");
        }
    }
}
        function confirmPunchOut() {
            Swal.fire({
                title: "Are you sure?",
                text: "Do you want to Punch Out?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, Punch Out!",
                cancelButtonText: "Cancel"
            }).then(result => {
                if (result.isConfirmed) punchOut();
            });
        }

        async function punchOut() {
            try {
                const response = await fetch('/dashboard/employee/punch-out', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();

                if (response.ok) {
                    Swal.fire("Success!", data.message, "success").then(() => location.reload());
                } else {
                    Swal.fire("Error!", data.message, "error");
                }
            } catch (error) {
                Swal.fire("Server Error!", "Something went wrong.", "error");
            }
        }

        function updateDateTime() {
            const now = new Date();
            const dateOptions = { day: 'numeric', month: 'long', year: 'numeric' };
            const formattedDate = now.toLocaleDateString('en-GB', dateOptions);
            const formattedTime = now.toLocaleDateString('en-GB', { weekday: 'long' }) +
                " | 10:00 AM To 7:00 PM";
            const formattedSeconds = now.getHours().toString().padStart(2, '0') + " : " +
                now.getMinutes().toString().padStart(2, '0') + ":" +
                now.getSeconds().toString().padStart(2, '0');

            document.getElementById("dateDisplay").textContent = formattedDate;
            document.getElementById("timeDisplay").textContent = formattedTime + " | " + formattedSeconds;
        }

        // Fetch employees on leave
        async function fetchEmployeesOnLeave() {
            try {
                const response = await fetch('/dashboard/employee/leave/list?status=approved', {
                    method: 'GET',
                    credentials: 'include'
                });
                const data = await response.json();
                
                if (data.success && data.leaves.length > 0) {
                    const today = new Date().toISOString().split('T')[0];
                   const onLeaveToday = data.leaves.filter(leave => {
    if (!leave.from_date || !leave.to_date) return false;

    const from = new Date(leave.from_date);
    const to = new Date(leave.to_date);
    const today = new Date();

    // If parsing failed, skip this leave
    if (isNaN(from) || isNaN(to)) return false;

    // Compare dates only (ignore time)
    const todayStr = today.toISOString().split('T')[0];
    const fromStr = from.toISOString().split('T')[0];
    const toStr = to.toISOString().split('T')[0];

    return fromStr <= todayStr && toStr >= todayStr;
});
                    const container = document.getElementById('onLeaveContainer');
                    if (onLeaveToday.length > 0) {
                        let html = '<div>';
                        onLeaveToday.forEach(leave => {
                            html += `
                                <span class="leave-badge">
                                    <i class="bi bi-person-x badge-icon"></i>
                                    ${leave.employee_name} (${leave.leave_type})
                                </span>
                            `;
                        });
                        html += '</div>';
                        container.innerHTML = html;
                    } else {
                        container.innerHTML = '<p class="text-muted">No employees on leave today</p>';
                    }
                } else {
                    document.getElementById('onLeaveContainer').innerHTML = 
                        '<p class="text-muted">No employees on leave today</p>';
                }
            } catch (error) {
                console.error("Error fetching employees on leave:", error);
                document.getElementById('onLeaveContainer').innerHTML = 
                    '<p class="text-danger">Error loading leave data</p>';
            }
        }

        // Fetch upcoming birthdays
   async function fetchUpcomingBirthdays() {
    try {
        const response = await fetch('/dashboard/employee/birthdays', {
            method: 'GET',
            credentials: 'include'
        });
        
        if (response.ok) {
            const data = await response.json();
            const container = document.getElementById('birthdaysContainer');
            
            if (data.success && data.birthdays.length > 0) {
                let html = '<div class="d-flex flex-wrap gap-2">';
                
                data.birthdays.forEach(emp => {
                    // Determine badge class based on days until
                    let badgeClass = "birthday-badge";
                    if (emp.days_until === 0) {
                        badgeClass = "birthday-badge-today";
                    } else if (emp.days_until <= 7) {
                        badgeClass = "birthday-badge-soon";
                    }
                    
                    html += `
                        <span class="${badgeClass}">
                            <i class="bi bi-balloon-fill badge-icon"></i>
                            ${emp.name} - ${emp.formatted_date}
                            ${emp.days_until === 0 ? ' (Today!)' : 
                              emp.days_until <= 7 ? ` (in ${emp.days_until} days)` : ''}
                        </span>
                    `;
                });
                
                html += '</div>';
                container.innerHTML = html;
            } else {
                container.innerHTML = `
                    <div class="text-center py-3">
                        <i class="bi bi-calendar-x fs-1 text-muted"></i>
                        <p class="text-muted mt-2">No IT Team birthdays in the next 30 days</p>
                    </div>
                `;
            }
        } else {
            throw new Error('Failed to fetch birthdays');
        }
    } catch (error) {
        console.error("Error fetching upcoming birthdays:", error);
        document.getElementById('birthdaysContainer').innerHTML = `
            <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill"></i> 
                Error loading birthday data
            </div>
        `;
    }
}
        setInterval(updateDateTime, 1000);
        updateDateTime();



    </script>
    <!-- At end of body -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
